openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /users/{id}:
    get:
      tags:
      - user-controller
      summary: Get user
      operationId: getUser
      parameters:
      - name: id
        in: path
        description: id of user to be searched
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: User not found
          content: {}
        "200":
          description: Found user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        "400":
          description: Invalid id supplied
    put:
      tags:
      - user-controller
      summary: Update a user
      operationId: updateUser
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
        required: true
      responses:
        "404":
          description: User not updated
          content: {}
        "200":
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        "400":
          description: Invalid id of user supplied
    delete:
      tags:
      - user-controller
      summary: User deleted
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: User not deleted
          content: {}
        "400":
          description: Invalid id of user supplied
        "200":
          description: User deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDto'
  /books/{id}:
    get:
      tags:
      - book-controller
      summary: Get a book by its id
      operationId: getBook
      parameters:
      - name: id
        in: path
        description: id of book to be searched
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Book not found
          content: {}
        "400":
          description: Invalid id supplied
        "200":
          description: Found book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDto'
    put:
      tags:
      - book-controller
      summary: Update a book
      operationId: updateBook
      parameters:
      - name: id
        in: path
        description: Id Book
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookDto'
        required: true
      responses:
        "404":
          description: Book not updated
          content: {}
        "400":
          description: Invalid id of book supplied
        "200":
          description: Book updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDto'
    delete:
      tags:
      - book-controller
      summary: Book deleted
      operationId: deleteBook
      parameters:
      - name: id
        in: path
        description: Id Book
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Book not deleted
          content: {}
        "400":
          description: Invalid id of book supplied
        "200":
          description: Book deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDto'
  /books/{idBook}/comments/{id}:
    get:
      tags:
      - comment-controller
      summary: Get comment by Id
      operationId: getComment
      parameters:
      - name: idBook
        in: path
        description: id of book to be searched
        required: true
        schema:
          type: integer
          format: int64
      - name: id
        in: path
        description: id of comment to be searched
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Comment not found
          content: {}
        "200":
          description: Found comments by Id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDto'
        "400":
          description: Invalid id comment supplied
    put:
      tags:
      - comment-controller
      summary: Update a comment
      operationId: updateComment
      parameters:
      - name: idBook
        in: path
        description: Book Id
        required: true
        schema:
          type: integer
          format: int64
      - name: id
        in: path
        description: Comment Id
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentDto'
        required: true
      responses:
        "404":
          description: Comment not updated
          content: {}
        "200":
          description: Comment updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDto'
        "400":
          description: Invalid id of comment supplied
    delete:
      tags:
      - comment-controller
      summary: Comment deleted
      operationId: deleteComment
      parameters:
      - name: idBook
        in: path
        description: Book Id
        required: true
        schema:
          type: integer
          format: int64
      - name: id
        in: path
        description: Comment Id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Comment not deleted
          content: {}
        "200":
          description: Comment deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDto'
        "400":
          description: Comment id supplied
  /users/:
    get:
      tags:
      - user-controller
      summary: Get all users
      operationId: getAll
      parameters:
      - name: page
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "404":
          description: User not found
          content: {}
        "200":
          description: Found users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        "400":
          description: Invalid id supplied
    post:
      tags:
      - user-controller
      summary: Add user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
        required: true
      responses:
        "404":
          description: User not added
          content: {}
        "200":
          description: User added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        "400":
          description: Invalid data supplied
  /books/{idBook}/comments/:
    post:
      tags:
      - comment-controller
      summary: Add comment
      operationId: createComment
      parameters:
      - name: idBook
        in: path
        description: Book Id
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentDto'
        required: true
      responses:
        "404":
          description: Comment not added
          content: {}
        "200":
          description: Comment added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDto'
        "400":
          description: Invalid data supplied
  /books/:
    get:
      tags:
      - book-controller
      summary: Get all books registered
      operationId: getAll_2
      parameters:
      - name: page
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "404":
          description: Books not found
          content: {}
        "400":
          description: Invalid id supplied
        "200":
          description: Found books
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDto'
    post:
      tags:
      - book-controller
      summary: Add a book
      operationId: createBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookDto'
        required: true
      responses:
        "404":
          description: Book not added
          content: {}
        "200":
          description: Book added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDto'
        "400":
          description: Invalid data supplied
  /users/{id}/comments/:
    get:
      tags:
      - user-controller
      operationId: getAllCommentsByUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentResponseDto'
  /books/{idBook}/comments:
    get:
      tags:
      - comment-controller
      summary: Get all comments by Book
      operationId: getAll_1
      parameters:
      - name: idBook
        in: path
        description: Comments by Book Id
        required: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "404":
          description: Comments not found
          content: {}
        "400":
          description: Invalid id comment supplied
        "200":
          description: Found comments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDto'
  /books/identifiers:
    get:
      tags:
      - book-controller
      operationId: getAllIdentifiers
      parameters:
      - name: page
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageBookIdentifiersDto'
components:
  schemas:
    UserDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        nick:
          type: string
        email:
          type: string
    BookDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        summary:
          type: string
        author:
          type: string
        editorial:
          type: string
        publicationYear:
          type: integer
          format: int32
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CommentDto'
    CommentDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        body:
          type: string
        points:
          type: integer
          format: int32
        user:
          $ref: '#/components/schemas/UserDto'
    CommentResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        body:
          type: string
        points:
          type: integer
          format: int32
        userId:
          type: integer
          format: int64
        bookId:
          type: integer
          format: int64
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string
    BookIdentifiersDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
    PageBookIdentifiersDto:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/BookIdentifiersDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/SortObject'
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
